name: Rust CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Increase test timeout for comprehensive test suite
  CARGO_TEST_TIMEOUT: 300

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlcipher-dev libglib2.0-dev pkg-config libgtk-3-dev libjavascriptcoregtk-4.1-dev

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: cargo doc --workspace --all-features --no-deps --document-private-items

  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlcipher-dev libglib2.0-dev pkg-config libgtk-3-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install sqlcipher

    - name: Run core unit tests
      run: cargo test -p mimir-core --lib

    - name: Run component unit tests
      run: |
        cargo test -p mimir-db --lib
        cargo test -p mimir-vector --lib  
        cargo test -p mimir-guardrails --lib
        cargo test -p mimir-compression --lib

    - name: Run SDK unit tests
      run: cargo test -p mimir-sdk --lib

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlcipher-dev libglib2.0-dev pkg-config libgtk-3-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

    - name: Run server integration tests
      run: cargo test -p mimir --test '*' --all-features

    - name: Run SDK integration tests  
      run: cargo test -p mimir-sdk --test '*' --all-features

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlcipher-dev libglib2.0-dev pkg-config libgtk-3-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

    - name: Run core benchmarks (quick)
      run: cargo bench -p mimir-core --bench memory_operations -- --sample-size 10

    - name: Run vector benchmarks (quick)
      run: cargo bench -p mimir-vector --bench vector_operations -- --sample-size 10

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlcipher-dev libglib2.0-dev pkg-config libgtk-3-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      run: |
        cargo llvm-cov clean --workspace
        cargo llvm-cov --workspace --lcov --output-path lcov.info \
          --ignore-filename-regex "benches/|tests/|examples/"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: lcov.info

  build-check:
    name: Build Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlcipher-dev libglib2.0-dev pkg-config libgtk-3-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install sqlcipher

    - name: Check all crates build
      run: cargo check --workspace --all-targets --all-features

    - name: Build in release mode
      run: cargo build --workspace --release

  build-release:
    name: Build Release Artifacts
    needs: [unit-tests, integration-tests, security, build-check]
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: mimir-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: mimir-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: mimir-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: mimir-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlcipher-dev libglib2.0-dev pkg-config libgtk-3-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install sqlcipher

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} -p mimir

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/mimir

    - name: Create artifact
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/mimir.exe artifacts/${{ matrix.artifact }}
        else
          cp target/${{ matrix.target }}/release/mimir artifacts/${{ matrix.artifact }}
        fi

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: artifacts/${{ matrix.artifact }}
        asset_name: ${{ matrix.artifact }}
        asset_content_type: application/octet-stream

  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, coverage]
    if: always()
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.unit-tests.result }}" = "success" ] && [ "${{ needs.integration-tests.result }}" = "success" ]; then
          echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Check the logs above." >> $GITHUB_STEP_SUMMARY
        fi 